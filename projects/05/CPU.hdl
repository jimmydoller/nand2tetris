// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// A register input
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=AregIn); // A register can be destination register of C instruction
	Not(in=instruction[15], out=IsAInstruction);
	Or(a=IsAInstruction, b=writeA, out=loadAreg);
	ARegister(in=AregIn, load=loadAreg, out=AregOut, out[0..14]=addressM);

	// D register input and ALU x input
	DRegister(in=ALUout, load=writeD, out=ALUx);

	// ALU y input from M or A
	Mux16(a=AregOut, b=inM, sel=instruction[12], out=ALUy);

	// Comp
    ALU(x=ALUx, y=ALUy, zx=instruction[11], nx=instruction[10],
	zy=instruction[9], ny=instruction[8], f=instruction[7],
	no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    // Determine if jumped
	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);

	And(a=notzr, b=notng, out=gt);
	And(a=notzr, b=ng, out=lt);

	And(a=gt, b=instruction[0], out=jg);
	And(a=zr, b=instruction[1], out=jeq);
	And(a=lt, b=instruction[2], out=jl);

    Or(a=jg, b=jl, out=j1);
	Or(a=j1, b=jeq, out=jumped);

	// Set PC
	And(a=jumped, b=instruction[15], out=loadPC);
	Or(a=loadPC, b=reset, out=notincPC);
	Not(in=notincPC, out=incPC);
	PC(in=AregOut, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

	// Destination
	And(a=instruction[3], b=instruction[15], out=writeM);
	And(a=instruction[4], b=instruction[15], out=writeD);
	And(a=instruction[5], b=instruction[15], out=writeA);

}
